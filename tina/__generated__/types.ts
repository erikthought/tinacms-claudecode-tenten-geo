//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  page: Page;
  pageConnection: PageConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};

export type DocumentFilter = {
  page?: InputMaybe<PageFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Page | Folder;

export type PageHeroStats = {
  __typename?: 'PageHeroStats';
  number: Scalars['String']['output'];
  label: Scalars['String']['output'];
};

export type PageHero = {
  __typename?: 'PageHero';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  ctaText: Scalars['String']['output'];
  stats?: Maybe<Array<Maybe<PageHeroStats>>>;
};

export type PageProblemItems = {
  __typename?: 'PageProblemItems';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
};

export type PageProblem = {
  __typename?: 'PageProblem';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  items?: Maybe<Array<Maybe<PageProblemItems>>>;
};

export type PageSolutionItems = {
  __typename?: 'PageSolutionItems';
  icon: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
};

export type PageSolution = {
  __typename?: 'PageSolution';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  items?: Maybe<Array<Maybe<PageSolutionItems>>>;
};

export type PagePricingPlans = {
  __typename?: 'PagePricingPlans';
  name: Scalars['String']['output'];
  price: Scalars['String']['output'];
  period: Scalars['String']['output'];
  featured?: Maybe<Scalars['Boolean']['output']>;
  badge?: Maybe<Scalars['String']['output']>;
  features: Array<Scalars['String']['output']>;
  ctaText: Scalars['String']['output'];
};

export type PagePricing = {
  __typename?: 'PagePricing';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  plans?: Maybe<Array<Maybe<PagePricingPlans>>>;
};

export type PageSocialProofStats = {
  __typename?: 'PageSocialProofStats';
  number: Scalars['String']['output'];
  label: Scalars['String']['output'];
};

export type PageSocialProof = {
  __typename?: 'PageSocialProof';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  stats?: Maybe<Array<Maybe<PageSocialProofStats>>>;
};

export type PageFinalCta = {
  __typename?: 'PageFinalCta';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  ctaText: Scalars['String']['output'];
};

export type PageFooter = {
  __typename?: 'PageFooter';
  tagline: Scalars['String']['output'];
  contactText: Scalars['String']['output'];
};

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  language: Scalars['String']['output'];
  hero?: Maybe<PageHero>;
  problem?: Maybe<PageProblem>;
  solution?: Maybe<PageSolution>;
  pricing?: Maybe<PagePricing>;
  socialProof?: Maybe<PageSocialProof>;
  finalCta?: Maybe<PageFinalCta>;
  footer?: Maybe<PageFooter>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PageHeroStatsFilter = {
  number?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type PageHeroFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  stats?: InputMaybe<PageHeroStatsFilter>;
};

export type PageProblemItemsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PageProblemFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  items?: InputMaybe<PageProblemItemsFilter>;
};

export type PageSolutionItemsFilter = {
  icon?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PageSolutionFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  items?: InputMaybe<PageSolutionItemsFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PagePricingPlansFilter = {
  name?: InputMaybe<StringFilter>;
  price?: InputMaybe<StringFilter>;
  period?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  badge?: InputMaybe<StringFilter>;
  features?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
};

export type PagePricingFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  plans?: InputMaybe<PagePricingPlansFilter>;
};

export type PageSocialProofStatsFilter = {
  number?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type PageSocialProofFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  stats?: InputMaybe<PageSocialProofStatsFilter>;
};

export type PageFinalCtaFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
};

export type PageFooterFilter = {
  tagline?: InputMaybe<StringFilter>;
  contactText?: InputMaybe<StringFilter>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  language?: InputMaybe<StringFilter>;
  hero?: InputMaybe<PageHeroFilter>;
  problem?: InputMaybe<PageProblemFilter>;
  solution?: InputMaybe<PageSolutionFilter>;
  pricing?: InputMaybe<PagePricingFilter>;
  socialProof?: InputMaybe<PageSocialProofFilter>;
  finalCta?: InputMaybe<PageFinalCtaFilter>;
  footer?: InputMaybe<PageFooterFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePage: Page;
  createPage: Page;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};

export type DocumentUpdateMutation = {
  page?: InputMaybe<PageMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  page?: InputMaybe<PageMutation>;
};

export type PageHeroStatsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

export type PageHeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<PageHeroStatsMutation>>>;
};

export type PageProblemItemsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PageProblemMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<PageProblemItemsMutation>>>;
};

export type PageSolutionItemsMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PageSolutionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<PageSolutionItemsMutation>>>;
};

export type PagePricingPlansMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['String']['input']>;
  period?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  badge?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
};

export type PagePricingMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  plans?: InputMaybe<Array<InputMaybe<PagePricingPlansMutation>>>;
};

export type PageSocialProofStatsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

export type PageSocialProofMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<PageSocialProofStatsMutation>>>;
};

export type PageFinalCtaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
};

export type PageFooterMutation = {
  tagline?: InputMaybe<Scalars['String']['input']>;
  contactText?: InputMaybe<Scalars['String']['input']>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<PageHeroMutation>;
  problem?: InputMaybe<PageProblemMutation>;
  solution?: InputMaybe<PageSolutionMutation>;
  pricing?: InputMaybe<PagePricingMutation>;
  socialProof?: InputMaybe<PageSocialProofMutation>;
  finalCta?: InputMaybe<PageFinalCtaMutation>;
  footer?: InputMaybe<PageFooterMutation>;
};

export type PagePartsFragment = { __typename: 'Page', title: string, description: string, language: string, hero?: { __typename: 'PageHero', title: string, subtitle: string, ctaText: string, stats?: Array<{ __typename: 'PageHeroStats', number: string, label: string } | null> | null } | null, problem?: { __typename: 'PageProblem', title: string, subtitle: string, items?: Array<{ __typename: 'PageProblemItems', title: string, description: string } | null> | null } | null, solution?: { __typename: 'PageSolution', title: string, subtitle: string, items?: Array<{ __typename: 'PageSolutionItems', icon: string, title: string, description: string } | null> | null } | null, pricing?: { __typename: 'PagePricing', title: string, subtitle: string, plans?: Array<{ __typename: 'PagePricingPlans', name: string, price: string, period: string, featured?: boolean | null, badge?: string | null, features: Array<string>, ctaText: string } | null> | null } | null, socialProof?: { __typename: 'PageSocialProof', title: string, subtitle: string, stats?: Array<{ __typename: 'PageSocialProofStats', number: string, label: string } | null> | null } | null, finalCta?: { __typename: 'PageFinalCta', title: string, subtitle: string, ctaText: string } | null, footer?: { __typename: 'PageFooter', tagline: string, contactText: string } | null };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, description: string, language: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PageHero', title: string, subtitle: string, ctaText: string, stats?: Array<{ __typename: 'PageHeroStats', number: string, label: string } | null> | null } | null, problem?: { __typename: 'PageProblem', title: string, subtitle: string, items?: Array<{ __typename: 'PageProblemItems', title: string, description: string } | null> | null } | null, solution?: { __typename: 'PageSolution', title: string, subtitle: string, items?: Array<{ __typename: 'PageSolutionItems', icon: string, title: string, description: string } | null> | null } | null, pricing?: { __typename: 'PagePricing', title: string, subtitle: string, plans?: Array<{ __typename: 'PagePricingPlans', name: string, price: string, period: string, featured?: boolean | null, badge?: string | null, features: Array<string>, ctaText: string } | null> | null } | null, socialProof?: { __typename: 'PageSocialProof', title: string, subtitle: string, stats?: Array<{ __typename: 'PageSocialProofStats', number: string, label: string } | null> | null } | null, finalCta?: { __typename: 'PageFinalCta', title: string, subtitle: string, ctaText: string } | null, footer?: { __typename: 'PageFooter', tagline: string, contactText: string } | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, description: string, language: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PageHero', title: string, subtitle: string, ctaText: string, stats?: Array<{ __typename: 'PageHeroStats', number: string, label: string } | null> | null } | null, problem?: { __typename: 'PageProblem', title: string, subtitle: string, items?: Array<{ __typename: 'PageProblemItems', title: string, description: string } | null> | null } | null, solution?: { __typename: 'PageSolution', title: string, subtitle: string, items?: Array<{ __typename: 'PageSolutionItems', icon: string, title: string, description: string } | null> | null } | null, pricing?: { __typename: 'PagePricing', title: string, subtitle: string, plans?: Array<{ __typename: 'PagePricingPlans', name: string, price: string, period: string, featured?: boolean | null, badge?: string | null, features: Array<string>, ctaText: string } | null> | null } | null, socialProof?: { __typename: 'PageSocialProof', title: string, subtitle: string, stats?: Array<{ __typename: 'PageSocialProofStats', number: string, label: string } | null> | null } | null, finalCta?: { __typename: 'PageFinalCta', title: string, subtitle: string, ctaText: string } | null, footer?: { __typename: 'PageFooter', tagline: string, contactText: string } | null } | null } | null> | null } };

export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  description
  language
  hero {
    __typename
    title
    subtitle
    ctaText
    stats {
      __typename
      number
      label
    }
  }
  problem {
    __typename
    title
    subtitle
    items {
      __typename
      title
      description
    }
  }
  solution {
    __typename
    title
    subtitle
    items {
      __typename
      icon
      title
      description
    }
  }
  pricing {
    __typename
    title
    subtitle
    plans {
      __typename
      name
      price
      period
      featured
      badge
      features
      ctaText
    }
  }
  socialProof {
    __typename
    title
    subtitle
    stats {
      __typename
      number
      label
    }
  }
  finalCta {
    __typename
    title
    subtitle
    ctaText
  }
  footer {
    __typename
    tagline
    contactText
  }
}
    `;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.5/content/13981b1f-e15f-4acb-9a5c-2d66d5ad4e49/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  