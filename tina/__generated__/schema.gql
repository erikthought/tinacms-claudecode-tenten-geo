# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Folder

type PageHeroStats {
  number: String!
  label: String!
}

type PageHero {
  title: String!
  subtitle: String!
  ctaText: String!
  stats: [PageHeroStats]
}

type PageProblemItems {
  title: String!
  description: String!
}

type PageProblem {
  title: String!
  subtitle: String!
  items: [PageProblemItems]
}

type PageSolutionItems {
  icon: String!
  title: String!
  description: String!
}

type PageSolution {
  title: String!
  subtitle: String!
  items: [PageSolutionItems]
}

type PagePricingPlans {
  name: String!
  price: String!
  period: String!
  featured: Boolean
  badge: String
  features: [String!]!
  ctaText: String!
}

type PagePricing {
  title: String!
  subtitle: String!
  plans: [PagePricingPlans]
}

type PageSocialProofStats {
  number: String!
  label: String!
}

type PageSocialProof {
  title: String!
  subtitle: String!
  stats: [PageSocialProofStats]
}

type PageFinalCta {
  title: String!
  subtitle: String!
  ctaText: String!
}

type PageFooter {
  tagline: String!
  contactText: String!
}

type Page implements Node & Document {
  title: String!
  description: String!
  language: String!
  hero: PageHero
  problem: PageProblem
  solution: PageSolution
  pricing: PagePricing
  socialProof: PageSocialProof
  finalCta: PageFinalCta
  footer: PageFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageHeroStatsFilter {
  number: StringFilter
  label: StringFilter
}

input PageHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  ctaText: StringFilter
  stats: PageHeroStatsFilter
}

input PageProblemItemsFilter {
  title: StringFilter
  description: StringFilter
}

input PageProblemFilter {
  title: StringFilter
  subtitle: StringFilter
  items: PageProblemItemsFilter
}

input PageSolutionItemsFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input PageSolutionFilter {
  title: StringFilter
  subtitle: StringFilter
  items: PageSolutionItemsFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PagePricingPlansFilter {
  name: StringFilter
  price: StringFilter
  period: StringFilter
  featured: BooleanFilter
  badge: StringFilter
  features: StringFilter
  ctaText: StringFilter
}

input PagePricingFilter {
  title: StringFilter
  subtitle: StringFilter
  plans: PagePricingPlansFilter
}

input PageSocialProofStatsFilter {
  number: StringFilter
  label: StringFilter
}

input PageSocialProofFilter {
  title: StringFilter
  subtitle: StringFilter
  stats: PageSocialProofStatsFilter
}

input PageFinalCtaFilter {
  title: StringFilter
  subtitle: StringFilter
  ctaText: StringFilter
}

input PageFooterFilter {
  tagline: StringFilter
  contactText: StringFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  language: StringFilter
  hero: PageHeroFilter
  problem: PageProblemFilter
  solution: PageSolutionFilter
  pricing: PagePricingFilter
  socialProof: PageSocialProofFilter
  finalCta: PageFinalCtaFilter
  footer: PageFooterFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
}

input PageHeroStatsMutation {
  number: String
  label: String
}

input PageHeroMutation {
  title: String
  subtitle: String
  ctaText: String
  stats: [PageHeroStatsMutation]
}

input PageProblemItemsMutation {
  title: String
  description: String
}

input PageProblemMutation {
  title: String
  subtitle: String
  items: [PageProblemItemsMutation]
}

input PageSolutionItemsMutation {
  icon: String
  title: String
  description: String
}

input PageSolutionMutation {
  title: String
  subtitle: String
  items: [PageSolutionItemsMutation]
}

input PagePricingPlansMutation {
  name: String
  price: String
  period: String
  featured: Boolean
  badge: String
  features: [String]
  ctaText: String
}

input PagePricingMutation {
  title: String
  subtitle: String
  plans: [PagePricingPlansMutation]
}

input PageSocialProofStatsMutation {
  number: String
  label: String
}

input PageSocialProofMutation {
  title: String
  subtitle: String
  stats: [PageSocialProofStatsMutation]
}

input PageFinalCtaMutation {
  title: String
  subtitle: String
  ctaText: String
}

input PageFooterMutation {
  tagline: String
  contactText: String
}

input PageMutation {
  title: String
  description: String
  language: String
  hero: PageHeroMutation
  problem: PageProblemMutation
  solution: PageSolutionMutation
  pricing: PagePricingMutation
  socialProof: PageSocialProofMutation
  finalCta: PageFinalCtaMutation
  footer: PageFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
